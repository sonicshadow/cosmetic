@model Cosmetic.Models.OrderViewModel
@{
    ViewBag.Title = "订单管理";
}
<div class="orderEdit">
    <ol class="breadcrumb">
        <li>@Html.ActionLink("订单管理", "Index")</li>
        <li class="active">@Model.Code</li>
    </ol>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.ID)
            @Html.Hidden("User_Parent", Model.ParentUser)
            <div class="form-group">
                @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10 form-control-static">
                    @Html.DisplayFor(model => model.Code, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UserID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10 form-control-static">
                    @Html.HiddenFor(model => model.UserID)
                    @Html.DisplayFor(model => model.User.RealName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.UserID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CreateDateTime, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10 form-control-static">
                    @Html.DisplayFor(model => model.CreateDateTime, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CreateDateTime, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Product, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10 form-control-static">
                    @Html.DisplayFor(model => model.Product.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Product, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10 form-control-static">
                    @Html.DisplayFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Count, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10 form-control-static">
                    @Html.DisplayFor(model => model.Count, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Count, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Total, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10 form-control-static">
                    @Html.DisplayFor(model => model.Total, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Total, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10 form-control-static">
                    <span class="state">@Model.State.GetDisplayName()</span>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ReceiptDateTime, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10 form-control-static">
                    @Html.DisplayFor(model => model.ReceiptDateTime, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ReceiptDateTime, "", new { @class = "text-danger" })
                </div>
            </div>

            @if (!string.IsNullOrWhiteSpace(Model.BankAccount))
            {
                <div class="form-group">
                    <label class="control-label col-md-2">收款人</label>
                    <div class="col-md-10 form-control-static">
                        @Model.BankAccount (@Model.BankCard @Model.BankName)
                        @Html.ValidationMessageFor(model => model.Send, "", new { @class = "text-danger" })
                    </div>
                </div>
            }

            <div class="form-group">
                @Html.LabelFor(model => model.Send, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10 form-control-static">
                    @Html.DisplayFor(model => model.Send, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Send, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.DeliverHistory, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10 form-control-static">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>@Html.DisplayNameFor(model => model.DeliverHistory.First().Address)</th>
                                <th>@Html.DisplayNameFor(model => model.DeliverHistory.First().Code)</th>
                                <th>@Html.DisplayNameFor(model => model.DeliverHistory.First().Count)</th>
                                <th>@Html.DisplayNameFor(model => model.DeliverHistory.First().CreateDateTime)</th>
                                <th>@Html.DisplayNameFor(model => model.DeliverHistory.First().Express)</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.DeliverHistory)
                            {
                                <tr>
                                    <td>@item.Address</td>
                                    <td>@item.Code</td>
                                    <td>@item.Count</td>
                                    <td>@Html.DisplayFor(model => item.CreateDateTime)</td>
                                    <td>@item.Express</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10 form-control-static">
                    @Html.ActionLink("返回", "Index", null, new { @class = "btn btn-default" })
                    @switch (Model.State)
                    {
                        case Cosmetic.Enums.OrderState.UnPay:
                            {
                                <input type="button" class="btn btn-default" id="cancelOrder" value="取消订单" />
                                <input type="button" @(string.IsNullOrWhiteSpace(Model.ParentUser) ? "" : "id=edit_pay") value="确认收款" class="btn btn-default"
                                data-toggle="modal" data-target="#Receipt" />
                            }
                            break;
                        case Cosmetic.Enums.OrderState.Pay:
                            {
                                <input type="button" data-toggle="modal" data-target="#myModal" class="btn btn-default" value="发货" />
                            }
                            break;
                        case Cosmetic.Enums.OrderState.Send:
                            {
                                <input type="button" data-toggle="modal" data-target="#myModal" class="btn btn-default" value="发货" />
                            }
                            break;
                        case Cosmetic.Enums.OrderState.Finish:
                            break;
                        case Cosmetic.Enums.OrderState.Delete:
                            break;
                        default:
                            break;
                    }
                </div>
            </div>
        </div>
    }
    @*发货*@
    <div class="modal fade bs-example-modal-lg" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="myModalLabel">发货</h4>
                </div>
                <div class="modal-body">
                    <form class="form-horizontal">
                        <div id="modelAlter"></div>
                        <div class="form-group">
                            <label for="Express" class="col-sm-3 control-label">快递公司名称</label>
                            <div class="col-sm-9 form-control-static">
                                <input type="text" id="Express" class="form-control" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="Code" class="col-sm-3 control-label">快递单号</label>
                            <div class="col-sm-9 form-control-static">
                                <input type="text" id="Code" class="form-control" />
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.User.Address, htmlAttributes: new { @class = "control-label col-sm-3" })
                            <div class="col-sm-9">
                                @Html.EditorFor(model => model.User.Address, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="Count" class="col-sm-3 control-label">发货数量</label>
                            <div class="col-sm-9 form-control-static">
                                <input type="number" id="Count" class="form-control" value="" />
                            </div>
                        </div>
                        @if (!string.IsNullOrWhiteSpace(Model.ParentUser))
                        {
                            <div class="form-group">
                                <label class="col-sm-3 control-label">库存数量</label>
                                <div class="col-sm-9 form-control-static">
                                    @ViewBag.Count
                                </div>
                            </div>
                        }
                        else
                        {
                            @*货号选择*@
                            <div class="form-group">
                                <label for="Count" class="col-sm-3 control-label">发货公司</label>
                                <div class="col-sm-9 form-control-static">
                                    <table class="table">
                                        <thead>
                                            <tr>
                                                <th>公司名称</th>
                                                <th>库存数量</th>
                                                <th>发货数量</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr>
                                                <td>@Html.DropDownList("sp_number", (List<SelectListItem>)ViewBag.SupplierProduct, new { @class = "form-control sp_number" })</td>
                                                <td><input type="text" class="form-control" id="sp_sendCount" /></td>
                                                <td><input type="text" class="form-control" value="@(Model.Count-Model.Send)" /></td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        }
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">取消发货</button>
                    <button type="button" class="btn btn-primary sendOrder">确定发货</button>
                </div>
            </div>
        </div>
    </div>

    @*收款人选择*@
    @if (string.IsNullOrWhiteSpace(Model.ParentUser)&& !Model.ReceiptDateTime.HasValue)
    {
        <div class="modal fade" id="Receipt" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        <h4 class="modal-title" id="myModalLabel">收款信息</h4>
                    </div>
                    <div class="modal-body">
                        <div class="ReceiptAlert"></div>
                        <form class="form-horizontal">
                            <div class="form-group">
                                <label for="Express" class="col-sm-2 control-label">收款人</label>
                                <div class="col-sm-10 form-control-static">
                                    @Html.DropDownList("payeeID", (List<SelectListItem>)ViewBag.Payee, new { @class = "form-control" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="Express" class="col-sm-2 control-label">手续费</label>
                                <div class="col-sm-10 form-control-static">
                                    <input type="number" id="Fee" value="0" class="form-control" />
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">取消</button>
                        <button type="button" id="surePay" class="btn btn-primary">确认收款</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>
@section Scripts {
    @Scripts.Render("~/bundles/orderEdit")
}
